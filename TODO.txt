TODO
====

- Possible create 'nicer' exceptions based on a base transmogrifier exception

- Sprinkle helpful logging statements throughout

- Create default utility sections:

  - construction (should take care of delayed cataloging, memory management,
    etc.)

  - workflow management

  - 'path' creation (insert Folders into the pipeline wherever required)

  - references

  - key mover (move the value of one key over to another)
  
  - re-coder (en- or decode keys between various encodings and unicode)
  
  - key inserter (insert fixed values into a certain key)

- Think about general option parsing support; many sections will be
  configurable with a list of keys to operate on, and perhaps some sort of
  patter matching will be needed. Supporting this would be the work of a
  module in collective.transmogrifier.
  
- Provide a UI for selecting and running pipelines

- Add configuration inclusion a l√° buildout, using 'extends'.

- Define a 'default import pipeline' variable in the transmogrifier section,
  so you can include a default set of sections that'll work for 95% of the
  transmogrifier import cases. The goal is to have a pipeline definition like
  this::

    extend = collective.transmogrifier.ploneimport
    pipeline =
        my.specific.import.section
        ${transmogrifier:importpipeline}
