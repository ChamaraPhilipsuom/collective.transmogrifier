TODO
====

- Possible create 'nicer' exceptions based on a base transmogrifier exception

- Sprinkle helpful logging statements throughout

- Reorganize sections to reduce dependencies

- Create default utility sections:

  - catalog delaying (replace catalog index methods with queues until
    iteration is done). May not be needed pending another project.

  - 'path' creation (insert Folders into the pipeline wherever required)

  - alternative path strategy: delay items until parents have been seen.

  - references

    - For archetypes-field managed references, a path resolver would suffice,
      as ReferenceField and ReverseReferenceField take objects or UIDs.

  - A logging section (log selected or all keys to a logging target (Z2, file,
    syslog, etc.) with configurable log level)

  - Black box? Section that encapsulates a single pipeline for the purposes of
    encapsulation and reuse.

  - Fail-safe default section: alter path to a leftover path if the path
    doesn't exist.

  - marker interfaces

  - archetypes mimetype encapsulator. File, image and text fields need a 
    mimetype, with the data wrapped in a OFS.Image.File object. This section
    should take a mimetype key and a data key and replace these with the
    OFS.Image.File object.

  - Unique path generator. If a path has been seen before, append an integer
    until it is unique again. Check against an internal list or against the
    context.

  - URLNormalizer section to generate suitable ids.

  - Clean up docs and tests for new sections from Florian (criteria, 
    browserdefault, changes to constructor)

- Provide a UI for selecting and running pipelines

- Add a GS profile step that reads one or more transmogrifier configuration 
  names from an file to execute.

- Define a 'default import pipeline' variable in the transmogrifier section,
  so you can include a default set of sections that'll work for 95% of the
  transmogrifier import cases. The goal is to have a pipeline definition like
  this::

    include = collective.transmogrifier.ploneimport
    pipeline =
        my.specific.import.section
        ${transmogrifier:importpipeline}

  With a black box section that could even be done without variable
  substitution.

- Perhaps utils.Expressions should grow an TAL iterator-like interface? YAGNI?
